
You might be restoring from several snapshots.
In this case I need to consider the behaviour
of port(id10) when id10 has already been ported.
The simplest is to return the id6 it has already been assigned...
This is a bit tricky since it is possible (however unlikely)
that the id10[0..5] has been taken not as a port of id10
but as a duplicate id (in storer) port.
So porter needs to keep a record of all the mappings....

port(id10)
  porter keeps record of mapping for both
  matching ids and mapped ids.
  Viz 420F2A2979 --> 420F2A  matching means
     /porter/matched-ids/420F2A2979   no need for content in file
  Viz 9fH6TumFV2 --> x45jKs different means
     /porter/mapped-ids/9fH6TumFV2    content of file == x45jKs

Now, port(id10)
  1. raises if id10 exists in storer
  2. raises if id10 exists in /porter/matched-ids or /porter/mapped-ids


Simplifying...
/porter/ported-ids/420F2A2979 contains 6 chars of new id
you simply look at the content of those 6 chars to see if
the id mapped with a matching or different id.
Will mean an file for all mapped ids. So better is
/porter/ported-ids/42/0F2A2979

So ports_with_matching_id and assert_ports_with_different_id
will be very similar except for the check on the content of
those 6 chars in the file.

Web can now get porter to easily check incoming 10 digit id.
Can it also check an incoming 6 digit id (from textbox entry)?
Yes. With a glob.
outer_id = id[0..1]
inner_id = id[2..-1]
ported_ids = Dir.glob("/porter/ported-ids/#{outer_id}/#{inner_id}**")
ported_ids.size == 1  ---> found
id6 = IO.read(ported_ids[0])

This also means you wont easily be able to tell how many ids
were mapped with matching id vs mapped with different id.
